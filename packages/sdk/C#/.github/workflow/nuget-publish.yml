name: Build and Publish NuGet Package

on:
  workflow_dispatch:
  push:
    branches: [main, develop]
    paths:
      - "src/**"
      - "Directory.*"
      - "*.props"
      - ".github/workflows/nuget-publish.yml"
      - "GitVersion.yml"
  pull_request:
    branches: [main, develop]
    paths:
      - "src/**"
      - "Directory.*"
      - "*.props"
      - ".github/workflows/nuget-publish.yml"
      - "GitVersion.yml"

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
      DOTNET_CLI_TELEMETRY_OPTOUT: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Required for GitVersion to work properly

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "8.0.x"
          source-url: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.10.2
        with:
          versionSpec: "5.x"

      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.10.2
        with:
          useConfigFile: true

      - name: Display GitVersion outputs
        run: |
          echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
          echo "NuGetVersionV2: ${{ steps.gitversion.outputs.nuGetVersionV2 }}"
          echo "AssemblySemVer: ${{ steps.gitversion.outputs.assemblySemVer }}"
          echo "FullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}"

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore /p:Version=${{ steps.gitversion.outputs.assemblySemVer }}

      - name: Run tests
        run: dotnet test --no-build --verbosity normal --configuration Release

      - name: Package NuGet
        run: dotnet pack --configuration Release --no-build --output nupkgs /p:Version=${{ steps.gitversion.outputs.nuGetVersionV2 }} /p:PackageVersion=${{ steps.gitversion.outputs.nuGetVersionV2 }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: nupkg
          path: nupkgs/*.nupkg

      # Publish to GitHub Packages only on main branch or when triggered manually
      - name: Publish NuGet package to GitHub Packages
        if: github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main'
        run: dotnet nuget push nupkgs/*.nupkg --api-key ${{ secrets.GITHUB_TOKEN }} --source https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json

      # Create a GitHub release with tag when pushing to main
      - name: Create Release
        uses: actions/create-release@v1
        if: github.ref == 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.gitversion.outputs.semVer }}
          release_name: Release v${{ steps.gitversion.outputs.semVer }}
          draft: false
          prerelease: false

      # Publish to NuGet.org only for releases from main branch
      - name: Publish to NuGet.org
        if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
        run: dotnet nuget push nupkgs/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
